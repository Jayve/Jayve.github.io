{"pages":[{"title":"","text":"个人简介 Jayve Jayve's idea 站长 -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 个人信息： 所学专业：计算机科学与技术 联系方式： Github: https://github.com/Jayve E-Mail: jayve#ideajayve.cn （替换#为@）","link":"/about/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名按加入时间先后，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息：网站图标：https://cdn.jsdelivr.net/gh/Jayve/blog_images@latest/img/avatar_fox.png网站名称：Jayve’s idea网站地址：https://www.ideajayve.cn网站站长：Jayve网站简介：记录灵感与心得，技术分享 友链 网址： @雪音 时间：2021.10.07简介：雪音の小屋","link":"/friend/index.html"}],"posts":[{"title":"世界，您好！","text":"欢迎使用WordPress。这是您的第一篇文章。编辑或删除它，然后开始写作吧！ 前言 使用架构 当WordPress主页遇到502 Bad Gateway WordPress后台仪表盘无法加载css样式 一、前言 自2020年1月26日凌晨一直折腾到27日傍晚，中途还遇到Windows更新与旧版本的火绒剑sysdiag.sys驱动鼎力合作，屡次蓝屏治我，历经艰难，我的第一个WordPress站点终于落地。 二、使用的架构 123456CentOS 8+ Nginx 1.14.1+ PHP 7.2.11+ MySQL 8.0.17博客框架：WordPress https://nodeedge.com/centos-8-nginx-php-mysql.html 过程大部分参考了zoco的这篇文章，我这样一个纯新手摸爬滚打才能搭建起自己的站点。 三、当WordPress主页遇到502 Bad Gateway 安装完Nginx PHP MySQL，WordPress目录也释放完毕，权限也设置好了，我以为很快就能见到HelloWorld，这时候遇到了问题。 Nginx欢迎页正常显示 编辑/etc/nginx/conf.d/目录下的站点conf文件，把server{}的root改到/var/www/wordpress 重启Nginx，访问主页 好嘛， 502 bad Gateway十分显眼。 这个问题困扰我整整一晚上，正赶上天快亮sysdiag.sys突然蓝屏治我，直接我就扭头睡觉。 27号起来继续鼓捣，灵光一闪，检查发现配置的access-log和error-log正常输出了，解决有望。 error-log里面有这么一条记录 1……connect() to unix:/tmp/php-fpm.sock failed (13: Permission denied) while connecting to upstream, client: xxx.xxx.xxx.xxx, server: localhost, …… 可以找到关键字段 1connect() to unix:/tmp/php-fpm.sock failed (13: Permission denied) 显然这就是导致WordPress搭建时502错误的元凶，权限问题。 参考CSDN的文章 php-fpm与nginx通信connect() to unix:/tmp/php-fpm.sock failed (13: Permission denied) 的解决方法 ，再想想自己搭建方案使用了新建的独立用户组用户，立刻就明白问题所在了。 解决方法是编辑php-fpm的配置文件www.conf 1vim /etc/php-fpm.d/www.conf 1.去除注解 listen.owner = www 和 listen.group = www 使其生效。 123listen.owner = wwwlisten.group = wwwlisten.mode = 0660 2.注意也要修改 /etc/nginx/conf.d/ 目录下站点conf文件， 修改 fastcgi\\_pass 与 /etc/php-fpm.d/www.conf 两个文件里面的 listen= 监听地址要一致： 1234567891011server{location ~ \\.php$ { root /var/www/wordpress; fastcgi_pass unix:/run/php-fpm/www.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_buffers 256 4k; include fastcgi_params; }} 上述配置修改完成后，WordPress站点就已经可以访问了。 如果是搭建WordPress站点，还需要在网页安装WordPress之前给服务器安装php-json模块，否则网页安装时会“遇到致命错误”。 为网站创建单独的MySQL数据库，给数据库用户设置权限的命令在MySQL 8中不受支持 考虑将以下命令： 1grant all privileges on nodeedge.* to nodeedge_user@localhost identified by 'nodeedge_password'; 替换为这种方式： 1grant all privileges on nodeedge.* to nodeedge_user@localhost WITH GRANT OPTION; 四、WordPress后台仪表盘无法加载css样式 建站成功后遇到的第一个问题，参考以下解决办法。 参考：Wordpress后台无法加载样式 WordPress的wp后台css样式错乱的原因是nginx配置fastcgi_buffers问题后台加载样式地址例如： https://www.example.com/wp-admin/load-scripts.php?c=1&amp;load%5B%5D=jquery-core,jquery-migrate,utils&amp;ver=5.0.4 这种url的内容太长，nginx的fcgi buff有限，导致无法正常加载cssserver字段里面放置： fastcgi\\_buffers 256 4k; 之后重启即可 后记 正是因为有着热衷分享交流的人，这小站搭建才能成功。 感谢，加油！","link":"/posts/bbc48f3a.html"},{"title":"Nginx + WordPress 媒体库上传图片提示“图像后期处理失败”","text":"建站之初就遇到这个问题，搜寻了好多资料， 添加过 Nginx 配置client\\_max\\_body\\_size 128m; 但仍未解决 该问题发生在上传图片时，产生如下错误提示： 错误提示 此时按 F12 调出开发者工具 - 控制台，可以捕捉到明显错误 .../async-upload.php 500 (Internal Server Error) 查看后台 /var/log/nginx/error.log 日志发现报错记录 12020/01/29 00:22:55 \\[crit\\] 29895#0: \\*688 open() &quot;/var/lib/nginx/tmp/client\\_body/0000000006&quot; failed (13: Permission denied), client: 172.69.34.220, server: ideajayve.club, request: &quot;POST /wp-admin/async-upload.php HTTP/1.1&quot;, host: &quot;ideajayve.club&quot;, referrer: &quot;http://158.247.196.28/wp-admin/media-new.php&quot; 一个显而易见的错误：Nginx 在打开上述路径时遇到 (13: Permission denied) 错误，因为 Nginx 权限不足。 既然是权限问题，查看 Nginx 所属用户和用户组 1ps aux grep &quot;nginx: worker process&quot; awk '{print $1}' 返回结果 12wwwroot 那么访问 /var/lib/nginx/tmp/client\\_body/0000000006 这个目录需要什么权限？ 执行命令查看该目录的权限 1sudo ls -al /var/lib/nginx/ 返回结果 1234total 12drwxrwx---. 3 nginx root 4096 Oct 7 21:17 .drwxr-xr-x. 48 root root 4096 Jan 27 15:08 ..drwxrwx---. 7 nginx root 4096 Oct 7 21:17 tmp 很明显这个 nginx 是默认用户，而我建站之初设立了独立用户 www ，这就导致了日志中的权限拒绝错误。 执行命令修改目录权限 1sudo chown -R www:www /var/lib/nginx/ 再次检查目录权限 1sudo ls -al /var/lib/nginx/ 返回结果 1234total 12drwxrwx---. 3 www www 4096 Oct 7 21:17 .drwxr-xr-x. 48 root root 4096 Jan 27 15:08 ..drwxrwx---. 7 www www 4096 Oct 7 21:17 tmp 很好，现在权限一致了，上传一张图片试试看。 上传成功 附图可见两次失败，修改过权限后第三次上传就正常了。 问题解决。 WordPress论坛的 @guygolan 在一篇帖子下面的回复提到 F12 查看控制台的方法，正巧今天我看到了这篇，问题才得到了解决。","link":"/posts/87934216.html"},{"title":"Nginx+WordPress 全站启用Https SSL安全加密连接","text":"2019年都过去了，难道我的站还要挂着http不加小锁头吗？自己鼓捣一个小时就搞定了全站 SSL 安全连接，看一看我是怎么做的。 一、准备 SSL 安全证书个人网站使用的免费证书有很多选择，本文选择使用 Let’s Encrypt 项目 获取免费证书。 部署推荐使用 Certbot ACME 客户端 ，它可以在不下线服务器的前提下自动执行证书颁发和安装。易于使用，适用于许多操作系统。官方页面对新手很友好，直接提供了命令建议。 对于CentOS 8 + Nginx 的部署，只需要几步即可完成。 1.安装 Certbot。1234wget https://dl.eff.org/certbot-autosudo mv certbot-auto /usr/local/bin/certbot-autosudo chown root /usr/local/bin/certbot-autosudo chmod 0755 /usr/local/bin/certbot-auto 2.获取证书虽然 Certbot 提供了一键自动配置 Nginx 1sudo /usr/local/bin/certbot-auto --nginx 但我更推荐仅获取证书，之后再手动修改配置。 1sudo /usr/local/bin/certbot-auto certonly --nginx 申请到的证书会保存在以下目录 /etc/letsencrypt/live/ideajayve.club/ 目录包含以下文件在内的多个文件，修改Nginx配置时会用到它们的路径。privkey.pem : 证书私钥文件fullchain.pem: 证书文件 3.创建自动证书续期服务echo “0 0,12 * * * root python -c ‘import random; import time; time.sleep(random.random() * 3600)’ &amp;&amp; /usr/local/bin/certbot-auto renew” sudo tee -a /etc/crontab &gt; /dev/null 二、开启 Nginx 转发重定向修改自己网站的配置文件，通常在以下目录 /etc/nginx/conf.d/ 1.修改原有的 80 端口监听的 HTTP server{} 为强制重定向修改后的 Nginx HTTP server{} 参考： HTTP server{} >folded123456# HTTP Server rewriteserver { listen 80; server_name ideajayve.club www.ideajayve.club; rewrite ^ https://$server_name$request_uri permanent;} 2.添加新的 443 端口监听的 HTTPS server{}修改后的 Nginx HTTPS server{} 参考： HTTPS server{} >folded12345678910111213141516171819202122232425262728293031# HTTPS Serverserver { listen 443 ssl http2; server_name ideajayve.club www.ideajayve.club; # Log access_log /var/log/nginx/ideajayve-access.log; error_log /var/log/nginx/ideajayve-error.log; location / { root /var/www/ideajayve; index index.php index.html index.htm; } # PHP listen location ~ \\.php$ { root /var/www/ideajayve; fastcgi_pass unix:/run/php-fpm/www.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_buffers 256 4k; include fastcgi_params; } # SSL ssl_certificate /etc/letsencrypt/live/ideajayve.club/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/ideajayve.club/privkey.pem; ssl_ciphers &quot;CHACHA20:GCM:HIGH:!DH:!RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS&quot;; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m;} 将以上两段配置文本整合在同一个配置文件中，执行命令重启 Nginx。 systemctl restart nginx 现在访问主站看看，地址栏左边已经可以显示 Https 小锁头。 三、开启 WordPress 强制 SSL修改 WordPress 根目录下的 wp-config.php， 追加以下代码： 123/\\* 强制后台和登录使用 SSL \\*/define('FORCE\\_SSL\\_LOGIN', true);define('FORCE\\_SSL\\_ADMIN', true); 现在 WordPress 的登录和后台都已开启强制使用 SSL。 四、修复 WordPress 站内图片链接之前上传到媒体库的图片都被 WordPress 记录了带有 http:// 前缀的绝对地址，我们可以通过修改数据库来修复。或者直接修改当前使用的主题目录下的 function.php，追加以下代码： 12345678/* 替换图片链接为 https */function my_content_manipulator($content){ if( is_ssl() ){ $content = str_replace('http://158.247.196.28/wp-content/uploads', 'http://158.247.196.28/wp-content/uploads', $content); } return $content;}add_filter('the_content', 'my_content_manipulator'); 还需要关心网站内链的修改，进入 WordPress 后台仪表盘 修改“菜单”当中的所有“自定义链接”为相对路径； 修改“设置”→“常规”里的 “WordPress 地址”和“站点地址”前缀为 https:// 好好想想，是否还有其他写下绝对地址的地方… 如果修改自定义链接后，遇到 WordPress 访问文章 404 的情况，需要修改网站 Nginx 配置。 修改并添加两部分 WordPress 重定向规则： 123456789101112131415161718192021# HTTPS Serverserver { location / { root /var/www/ideajayve; index index.php index.html index.htm; # WordPress rewrite if (-f $request_filename/index.html){ rewrite (.*) $1/index.html break; } if (-f $request_filename/index.php){ rewrite (.*) $1/index.php; } if (!-f $request_filename){ rewrite (.*) /index.php; } } # WordPress Admin Page rewrite rewrite /wp-admin$ $scheme://$host$uri/ permanent;} 保存后重启 Nginx systemctl restart nginx 之前访问出现 404 错误的文章，现在可以正常访问了。 至此，Nginx + WordPress 全站 SSL 已经开启，访问已安全加密。","link":"/posts/39f4c9d4.html"},{"title":"一文弄懂Nginx的location匹配","text":"由于团队在进行前后端分离，前端接管了Nginx和node层，在日常的工作中，跟Nginx打交道的时候挺多的。之前对location的匹配规则是一知半解的，为了搞明白location是如何匹配的，查了些资料总结此文。希望能给大家带来帮助。 语法规则12location [ = | ~ | ~* | ^~ ] uri { ... }location @name { ... } 语法规则很简单，一个location关键字，后面跟着可选的修饰符，后面是要匹配的字符，花括号中是要执行的操作。 修饰符 = 表示精确匹配。只有请求的url路径与后面的字符串完全相等时，才会命中。 ~ 表示该规则是使用正则定义的，区分大小写。 ~* 表示该规则是使用正则定义的，不区分大小写。 ^~ 表示如果该符号后面的字符是最佳匹配，采用该规则，不再进行后续的查找。 匹配过程对请求的url序列化。例如，对%xx等字符进行解码，去除url中多个相连的/，解析url中的.，..等。这一步是匹配的前置工作。 location有两种表示形式，一种是使用前缀字符，一种是使用正则。如果是正则的话，前面有~或~*修饰符。 具体的匹配过程如下： 首先先检查使用前缀字符定义的location，选择最长匹配的项并记录下来。 如果找到了精确匹配的location，也就是使用了=修饰符的location，结束查找，使用它的配置。 然后按顺序查找使用正则定义的location，如果匹配则停止查找，使用它定义的配置。 如果没有匹配的正则location，则使用前面记录的最长匹配前缀字符location。 基于以上的匹配过程，我们可以得到以下两点启示： 使用正则定义的location在配置文件中出现的顺序很重要。因为找到第一个匹配的正则后，查找就停止了，后面定义的正则就是再匹配也没有机会了。 使用精确匹配可以提高查找的速度。例如经常请求/的话，可以使用=来定义location。 示例接下来我们以一个例子来具体说明一下匹配过程。 假如我们有下面的一段配置文件： 12345678910111213141516171819location = / { [ configuration A ]}location / { [ configuration B ]}location /user/ { [ configuration C ]}location ^~ /images/ { [ configuration D ]}location ~* \\.(gif|jpg|jpeg)$ { [ configuration E ]} 请求/精准匹配A，不再往下查找。 请求/index.html匹配B。首先查找匹配的前缀字符，找到最长匹配是配置B，接着又按照顺序查找匹配的正则。结果没有找到，因此使用先前标记的最长匹配，即配置B。 请求/user/index.html匹配C。首先找到最长匹配C，由于后面没有匹配的正则，所以使用最长匹配C。请求/user/1.jpg匹配E。首先进行前缀字符的查找，找到最长匹配项C，继续进行正则查找，找到匹配项E。因此使用E。 请求/images/1.jpg匹配D。首先进行前缀字符的查找，找到最长匹配D。但是，特殊的是它使用了^~修饰符，不再进行接下来的正则的匹配查找，因此使用D。这里，如果没有前面的修饰符，其实最终的匹配是E。大家可以想一想为什么。 请求/documents/about.html匹配B。因为B表示任何以/开头的URL都匹配。在上面的配置中，只有B能满足，所以匹配B。 location @name的用法@用来定义一个命名location。主要用于内部重定向，不能用来处理正常的请求。其用法如下： 123456location / { try_files $uri $uri/ @custom}location @custom { # ...do something} 上例中，当尝试访问url找不到对应的文件就重定向到我们自定义的命名location（此处为custom）。 值得注意的是，命名location中不能再嵌套其它的命名location。 URL尾部的/需不需要关于URL尾部的/有三点也需要说明一下。第一点与location配置有关，其他两点无关。 location中的字符有没有/都没有影响。也就是说/user/和/user是一样的。 如果URL结构是https://domain.com/的形式，尾部有没有/都不会造成重定向。因为浏览器在发起请求的时候，默认加上了/。虽然很多浏览器在地址栏里也不会显示/。这一点，可以访问baidu验证一下。 如果URL的结构是https://domain.com/some-dir/。尾部如果缺少/将导致重定向。因为根据约定，URL尾部的/表示目录，没有/表示文件。所以访问/some-dir/时，服务器会自动去该目录下找对应的默认文件。如果访问/some-dir的话，服务器会先去找some-dir文件，找不到的话会将some-dir当成目录，重定向到/some-dir/，去该目录下找默认文件。可以去测试一下你的网站是不是这样的。 总结location的配置有两种形式，前缀字符和正则。查找匹配的时候，先查找前缀字符，选择最长匹配项，再查找正则。正则的优先级高于前缀字符。 正则的查找是按照在配置文件中的顺序进行的。因此正则的顺序很重要，建议越精细的放的越靠前。 使用=精准匹配可以加快查找的顺序，如果根域名经常被访问的话建议使用=。","link":"/posts/516d63e.html"},{"title":"CentOS 8 系统升级安装PHP 7.4","text":"27号建完站，WordPress后台的站点健康检查告诉我PHP 7.2早已过期，同时建议我至少安装PHP7.3版本以上。 由于yum的默认源目前能装到的版本最高只有PHP 7.3，关键我还不会装，干脆就寻得一套新方案：使用EPEL和REMI存储库 一、添加EPEL和REMI存储库EPEL和REMI存储库是此安装的主要要求，通过运行以下命令将它们添加到系统： 12sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpmsudo yum -y install https://rpms.remirepo.net/enterprise/remi-release-8.rpm 参考：在RHEL 8/CentOS 8上安装EPEL存储库（EPEL Repository）的方法。 二、在CentOS 8 中安装PHP 7.4成功安装EPEL之后，通过运行以下命令来安装dnf-utils。 1sudo dnf -y install dnf-utils 1.卸载旧版本 PHP1rpm -qa grep phpxargs rpm -e 卸载命令两条，任一皆可 1yum remove php* 2.在CentOS 8/RHEL 8中启用PHP 7.4的模块流：1sudo dnf module install php:remi-7.4 如果没有问题，输入y安装完毕后，可选使用 EPEL和REMI存储库 更新全部软件包 1sudo dnf update 3.安装其他 PHP 扩展软件包注：如果搭建WordPress + MySQL，至少还需要 php-mysql php-gd php-zip 等。 1sudo yum install php-XXX 至此，所安装的PHP版本应为7.4，如下： 1php -v 123PHP 7.4.2 (cli) (built: Jan 21 2020 11:35:20) ( NTS )Copyright (c) The PHP GroupZend Engine v3.4.0, Copyright (c) Zend Technologies 要查看启用的模块，请运行： 1php --modules 至此，已完成在CentOS 8 中安装PHP 7.4的操作。 参考资料：https://www.php.cn/topic/php7/434093.html","link":"/posts/e35f3bdd.html"},{"title":"如何安装yum&#x2F;dnf搜不到的软件包","text":"WordPress后台的站点健康扫描又说我缺东西没安装，比如说imagick 网上搜寻发现，该扩展包需要好几个-devel后缀的软件包做前置需求，最终通过 pecl install imagick命令自动make出来一份，还要改php.ini 吧啦吧啦的。 过程中有些包括 libedit-devel 在内的软件包，使用yum install 或 dnf install 都无法找到。 正好这时发现了一个搜索软件包的好站点 https://centos.pkgs.org/ 不仅在该站搜到了所有需要的包，他们还提供了下载命令，直接复制粘贴。 （例：软件包详情页的一部分） Install HowtoInstall libedit-devel rpm package:# dnf --enablerepo=PowerTools install libedit-devel 通过该命令快速完成了所有需求的安装，有需求不妨去该站搜搜。","link":"/posts/aa51763c.html"},{"title":"如何解决MySQL数据库经常崩溃导致网站无法连接","text":"查了一下类似的问题，多是因为数据库内存不足而无法分配资源。 使用了创建swap分区的方式，用SSD空间作为虚拟内存。 先查看硬盘剩余空间 1df -h 剩余空间多得很，直接分配5个G的交换分区： 1234dd if=/dev/zero of=/swap.dat bs=1024 count=5120000mkswap /swap.datswapon /swap.datfree -m 为了让系统自动挂载swap分区，编辑/etc/fstab并添加一行： 1/swap.dat swap swap 0 0 重新启动。奥利给 附：删除swap交换分区的方法 停止正在使用的swap分区： 1swapoff /swap.dat 删除swap分区文件： 1rm /swap.dat 参考资料： https://www.trpgfans.com/4455 https://www.jb51.net/article/138132.htm","link":"/posts/ebef94cd.html"}],"tags":[{"name":"Nginx","slug":"Nginx","link":"/tags/Nginx/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"WordPress","slug":"WordPress","link":"/tags/WordPress/"},{"name":"杂谈","slug":"杂谈","link":"/tags/%E6%9D%82%E8%B0%88/"},{"name":"CentOS","slug":"CentOS","link":"/tags/CentOS/"},{"name":"SSL","slug":"SSL","link":"/tags/SSL/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"}],"categories":[{"name":"技术交流","slug":"技术交流","link":"/categories/%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81/"},{"name":"杂谈","slug":"技术交流/杂谈","link":"/categories/%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81/%E6%9D%82%E8%B0%88/"},{"name":"资源分享","slug":"资源分享","link":"/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"}]}